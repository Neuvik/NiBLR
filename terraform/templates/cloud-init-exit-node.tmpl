#cloud-config
# Adds the users to the system

write_files:
  - content: |
      #!/bin/bash
      export DEBIAN_FRONTEND=noninteractive
      apt-get update && \
      apt-get -o Dpkg::Options::="--force-confold" upgrade -q -y --allow-remove-essential --allow-downgrades && \
      apt-get -o Dpkg::Options::="--force-confold" dist-upgrade -q -y --allow-remove-essential --allow-downgrades && \
      apt autoremove -y
      sudo reboot
    path: /root/update.sh
    permissions: '0700'

  - content: |
      0 5 * * 1 root /root/updates.sh >/dev/null 2>&1
    path: /etc/cron.d/updates
    permissions: '0644'

  - content: |
      #!/bin/bash
      sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/g' /etc/sysctl.conf
      #systemctl -f enable openvpn-server@server.service
      #systemctl start openvpn-server@server.service
      sysctl -w net.ipv4.ip_forward=1
      sysctl -p 
    path: /root/install.sh
    permissions: '0700'
    
users:
  - default
  - name: ansible
    lock_passwd: true
    shell: /bin/bash
    ssh_authorized_keys:
    - ${ansible_key}
    sudo: ALL=(ALL) NOPASSWD:ALL
 %{ for operators_key, operators_value in operators ~}
 - name: ${operators_key}
    lock_passwd: true
    shell: /bin/bash
    ssh_authorized_keys:
    - ${operators_value}
    sudo: ALL=(ALL) NOPASSWD:ALL
 %{ endfor ~}


# These packaages are just placeholders, bastions are typically just doing SSH Inbound for Tunneling.
packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg-agent
  - openvpn
  - p7zip-full
  - software-properties-common
  - unattended-upgrades
  - wireguard

# This should update all of the packages and keep the system up to date.
package_update: true
package_upgrade: true
package_reboot_if_required: true

# Final cleanup step.
power_state:
  mode: reboot
  delay: 1
  message: Rebooting after installation