#cloud-config
# Adds the users to the system

fqdn: ${hostname}
write_files:
  - content: |
      #!/bin/bash
      export DEBIAN_FRONTEND=noninteractive
      apt-get update && \
      apt-get -o Dpkg::Options::="--force-confold" upgrade -q -y --allow-remove-essential --allow-downgrades && \
      apt-get -o Dpkg::Options::="--force-confold" dist-upgrade -q -y --allow-remove-essential --allow-downgrades && \
      apt autoremove -y
      sudo reboot
    path: /root/update.sh
    permissions: '0700'

  - content: |
      0 5 * * 1 root /root/updates.sh >/dev/null 2>&1
    path: /etc/cron.d/updates
    permissions: '0644'

  - content: |
      #!/bin/bash
      sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/g' /etc/sysctl.conf
      #systemctl -f enable openvpn-server@server.service
      #systemctl start openvpn-server@server.service
      sysctl -w net.ipv4.ip_forward=1
    path: /root/install.sh
    permissions: '0700'

  - content: |
      #! /bin/bash
      IP=$1
      DIR=/root
      # random sleep to avoid race condition
      echo "Sleeping to avoid race conditions"
      sleep $[ ( $RANDOM % 10 )  + 1 ]s
      for pid in $(pidof -x "add_route.bash"); do
	      if [ $pid != $$ ]; then
		      echo "[!] ROUTE ADD: another addition process is running. Waiting our turn..."
		      sleep 2
	      else
		      break
	      fi
      done
      # grab last ran route cmd
      ROUTECMD=$(cat $DIR/.routecmd)
      # is there a last used route cmd
      if [ -z "$ROUTECMD" ];then
	      echo "[!] ROUTE ADD: first time adding a route"
	      ROUTECMD="ip route add default proto static scope global table loadb nexthop via $IP weight 100"
	      eval $ROUTECMD
	      echo "[+] ROUTE ADD CMD: $ROUTECMD"
	      # save route as a replace command
	      ROUTECMD=`echo $ROUTECMD | sed 's/ip route add/ip route replace/'`
      else
	      echo "[+] CHECK: checking if this route already exists"
	      if [[ $(ip route show table loadb | grep -o $IP) ]];then
	             echo "[-] ROUTE ADD CMD: Route Exists"
		           exit 0
               echo $ROUTECMD > $DIR/.routecmd
	      else
              echo "[+] ROUTE ADD: adding $IP to route table"
		          ROUTECMD="$ROUTECMD nexthop via $IP weight 100 "
		          eval $ROUTECMD
		          echo "[+] ROUTE ADD CMD: $ROUTECMD"
              echo $ROUTECMD > $DIR/.routecmd
	      fi
      fi
    path: /root/add_route.bash
    permissions: '0700'

  - content: |
      #! /bin/bash
      IP=$1
      DIR=/root
      # random sleep to avoid race condition
      echo "Sleeping to avoid race condition"
      sleep $[ ( $RANDOM % 5 )  + 1 ]s
      for pid in $(pidof -x "del_route.bash"); do
              if [ $pid != $$ ]; then
                      echo "[!] ROUTE DELETE: another addition process is running. Waiting our turn..."
                      sleep 2
              else
                      break
              fi
      done
      # grab last ran route cmd
      ROUTECMD=$(cat $DIR/.routecmd)
      # is there a last used route cmd
      if [ -z "$ROUTECMD" ]; then
	      echo "[!] ROUTE DELETE: cannot find last route cmd used. Will not delete $IP from routing table"
	      exit 0
      else
	      if [[ $(ip route show table loadb | grep -o $IP) ]]; then
		      # add route statement without specific IP (delete route)
		      ROUTECMD=`echo $ROUTECMD | sed "s/nexthop via $IP weight 100//"`
		      # check if we are delete the very last route. if so, change route cmd to a delete cmd
		      if [[ $(echo $ROUTECMD | grep -o nexthop) ]]; then
			      echo "[-] ROUTE DELETE: deleting $IP from routing table"
			      echo "[-] ROUTE DELETE CMD: $ROUTECMD"
			      eval $ROUTECMD
			      # save last ran route to file
			      echo $ROUTECMD > $DIR/.routecmd
		      else
			      echo "[!] ROUTE DELETE: removing last route"
			      ROUTECMD=`echo $ROUTECMD | sed 's/ip route replace/ip route del/'`
			      eval $ROUTECMD
			      echo "[-] ROUTE DELETE CMD: $ROUTECMD"
			      # last route deleted, no need to save last route statement
			      rm -f $DIR/.routecmd
		      fi
	      else
		      echo "[!] ROUTE DELETE: IP $IP is not in the route table"
		      exit 0
	      fi
      fi
    path: /root/add_route.bash
    permissions: '0700'
  
  - content: |
      [Interface]
      Address = 10.10.9.1/24
      ListenPort = 50000
      PrivateKey = ${wg0_priv_key}
      PostUp   = iptables -A FORWARD -i wgHub -j ACCEPT; iptables -A FORWARD -o wgHub -j ACCEPT
      PostDown = iptables -D FORWARD -i wgHub -j ACCEPT; iptables -D FORWARD -o wgHub -j ACCEPT
      SaveConfigs = true

      # Client 1
      [Peer]
      PublicKey = ${client1_public_key} 
      AllowedIPs = 10.10.9.2/32

    path: /etc/wireguard/wgHub.conf
    permissions: '0700'

runcmd:
  - hostnamectl set-hostname ${hostname}
  - systemctl enable wg-quick@wgHub.service
  - systemctl start wg-quick@wgHub.service
  
users:
  - default
  - name: ansible
    lock_passwd: true
    shell: /bin/bash
    ssh_authorized_keys:
    - ${ansible_key}
    sudo: ALL=(ALL) NOPASSWD:ALL
 %{ for operators_key, operators_value in operators ~}
 - name: ${operators_key}
    lock_passwd: true
    shell: /bin/bash
    ssh_authorized_keys:
    - ${operators_value}
    sudo: ALL=(ALL) NOPASSWD:ALL
 %{ endfor ~}
  
# These packaages are just placeholders, bastions are typically just doing SSH Inbound for Tunneling.
packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg-agent
  - p7zip-full
  - software-properties-common
  - unattended-upgrades
  - wireguard

# This should update all of the packages and keep the system up to date.
package_update: true
package_upgrade: true
package_reboot_if_required: true

# Final cleanup step.
power_state:
  mode: reboot
  delay: 1
  message: Rebooting after installation